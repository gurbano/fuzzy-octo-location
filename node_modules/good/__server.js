var Http = require('http');
var Https = require('https');
var Hapi = require('hapi');
var Path = require('path');
var Good = require('./lib');

var server = new Hapi.Server('0.0.0.0', 3000);

server.route({
    method: 'GET',
    path: '/static/{path*}',
    config: {
        handler: {
            directory: {
                path: Path.join(__dirname, 'static'),
                index: false
            }
        }
    }
});

server.route({
    method: 'GET',
    path: '/',
    config: {
        handler: function (request, reply) {

            //request.log(['test'], 'this should kick a log event');
            server.log(['user'], 'this is my log');

            reply({
                data: 'here is some response'
            });
        }
    }
});

server.route({
    method: 'GET',
    path: '/log',
    config: {
        handler: function (request, reply) {

            request.server.log(['info'], 'logging some data');
            request.server.emit('internalError', request, new Error('this is not a real error'));
            return reply({
                data: 'here is some response'
            });
        }
    }
});

server.route({
    method: 'GET',
    path: '/out',
    config: {
        handler: function (request, reply) {

            Http.get('http://www.google.com?q=');
            Https.get('https://www.google.com?q=');
            reply();
        }
    }
});



server.route({
    method: 'GET',
    path: '/stop',
    config: {
        handler: function (request, reply) {

            reply('stopping server');
            server.stop();
        }
    }
});

//var options = {
//    opsInterval: 1000,
//    reporters: [{
//        reporter: 'good-console',
//        args: [{
//            events: {
//                request: '*',
//                log: '*',
//                error: '*'
//            }
//        }]
//    }, {
//        reporter: 'good-file',
//        args:['./test/fixtures/me', {
//            events: {
//                ops:'*'
//            }
//        }]
//    }]
//};

// Good 4 options
//var options = {
//    opsInterval: 1000,
//    reporters: [{
//        reporter: require('good-file'),
//        args:['./_ops', { ops: '*' }]
//    }, {
//        reporter: require('good-file'),
//        args: ['./_log', { log: 'user'}]
//    }]
//};

// Good 4 options
//var options = {
//    opsInterval: 100,
//    reporters: [{
//        reporter: require('good-file'),
//        args:['./test/fixtures/log', { log: 'user' }]
//    }, {
//        reporter: require('good-file'),
//        args: ['./test/fixtures/otherlog', { log: 'user'}]
//    }]
//};

// Good 2 options
var options = {
    opsInterval: 100,
    subscribers: {
       './_ops' : ['ops'],
        './_log' : { tags: ['user'], events: ['log'] }
    }
};


server.pack.register({
    plugin: Good,
    options: options
}, function (error) {
    if (error) {
        return console.error(error);
    }

   server.start(function (error) {
       if (error) {
           return console.error(error);
       }
       console.log('Server started at: %s', server.info.uri);
   });
});
